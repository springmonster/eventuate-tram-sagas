buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
    }
}


apply plugin: 'docker-compose'

allprojects {
    group = "io.eventuate.tram.sagas"
}


allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven {
            url 'http://maven.aliyun.com/nexus/content/groups/public/'
        }
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
        mavenCentral()
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    if (!project.name.endsWith("-bom")) {

        dependencies {
            testCompile "junit:junit:4.12"
            testCompile "org.mockito:mockito-core:2.23.0"
        }

        bintray {
            publish = true
            user = System.getenv('BINTRAY_USER')
            key = System.getenv('BINTRAY_KEY')
            configurations = ['archives']
            pkg {
                repo = "eventuate-maven-$bintrayRepoType"
                name = 'eventuate-tram-sagas'
                licenses = ['Apache-2.0']
                vcsUrl = 'https://github.com/eventuate-tram/eventuate-tram-sagas'
            }
        }
    }

    configurations {
        deployerJars
    }

    dependencies {
        deployerJars 'org.springframework.build:aws-maven:5.0.0.RELEASE'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                repository(url: deployUrl) {
                    authentication(userName: System.getenv('S3_REPO_AWS_ACCESS_KEY'), password: System.getenv('S3_REPO_AWS_SECRET_ACCESS_KEY'))
                }
                pom.project {
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }


}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP
        dependsOn subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc

        source subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.source
        destinationDir file("$buildDir/docs/javadoc")
        classpath = files(subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.classpath)
    }

    task("aggregateJavaDocsJar", type: org.gradle.api.tasks.bundling.Jar, dependsOn: project.aggregateJavaDocs) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives project.aggregateJavaDocsJar
    }

}


dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion

    activemqInfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
        startedServices = ["mysql", "activemq"]
    }
    mysqlInfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
        startedServices = ["mysql", "zookeeper", "kafka"]
    }
    mysqlAll {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
    }
    postgresInfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
        startedServices = ["postgres", "zookeeper", "kafka"]
    }
    postgresAll {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
    }
}
